# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from aiohttp import web
from config import BOT_TOKEN, PORT, WEBHOOK_BASE_URL, WEBHOOK_PATH, WEBHOOK_SECRET
from handlers import router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    bot = None
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env")
            return

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher(storage=MemoryStorage())

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        dp.include_router(router)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω WEBHOOK_BASE_URL ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º webhook-—Å–µ—Ä–≤–µ—Ä, –∏–Ω–∞—á–µ polling
        if WEBHOOK_BASE_URL:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
            webhook_url = f"{WEBHOOK_BASE_URL}{WEBHOOK_PATH}"
            await bot.set_webhook(
                url=webhook_url,
                secret_token=WEBHOOK_SECRET or None,
            )
            logger.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

            # –°–æ–∑–¥–∞–µ–º aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram
            async def handle_webhook(request: web.Request) -> web.Response:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
                if WEBHOOK_SECRET:
                    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
                        return web.Response(status=403)

                data = await request.json()
                update = bot.session.json_loads(data)
                await dp.feed_update(bot, update)
                return web.Response(text="ok")

            app.router.add_post(WEBHOOK_PATH, handle_webhook)

            # health-check endpoint –¥–ª—è Render
            async def health(_: web.Request) -> web.Response:
                return web.Response(text="ok")

            app.router.add_get("/", health)

            logger.info(f"üõ∞Ô∏è –°–ª—É—à–∞—é –ø–æ—Ä—Ç {PORT} –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤...")
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
            await site.start()

            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
            while True:
                await asyncio.sleep(3600)
        else:
            logger.info("üì° WEBHOOK_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞—é polling (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)")
            await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if bot is not None:
            await bot.session.close()


if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
